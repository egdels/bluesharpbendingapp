# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Clean"
  lane :clean do
    gradle(task: "clean")
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    upload_to_play_store(
      track: "internal", # oder "alpha", "beta", "production"
      aab: File.join(__dir__, "./android/app/release/android-release.aab")
    )

  end

  desc "Builds a signed Android App Bundle (.aab) for release"
  lane :build_signed_bundle do
    gradle(
      task: "bundle",
      build_type: "Release",
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEYSTORE_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"]
      }
    )

    aab_path = File.join(__dir__, "../android/app/build/outputs/bundle/release/android-release.aab")
    destination_folder = File.join(__dir__, "../android/app/release")
    FileUtils.mkdir_p(destination_folder)
    FileUtils.cp(aab_path, destination_folder)
    UI.success("Copied .aab file to #{destination_folder}")
    increment_version_code(gradle_file_path: "./android/app/build.gradle")
  end

  desc "Tags the Android release .aab bundle and pushes the tag to the origin"
  lane :tag_and_push_bundle do
    aab_path = File.join(__dir__, "../android/app/release/android-release.aab")

    if !File.exist?(aab_path)
      UI.error("The .aab file does not exist at: #{aab_path}")
      exit 1
    end

    version_file = File.join(__dir__, "../build.gradle")
    version = nil
    File.foreach(version_file) do |line|
      if line.match(/version\s*=\s*['"](.*)['"]/)
        version = line.match(/version\s*=\s*['"](.*)['"]/)[1]
        break
      end
    end
    if version.nil?
      UI.error("Could not find a version in #{version_file}")
      exit 1
    end

    tag_name = "v#{version}"

    add_git_tag(
      tag: tag_name,
      message: "Release for bundle: #{tag_name}"
    )

    push_git_tags


    github_release(
            repository_name: "egdels/bluesharpbendingapp",
            tag_name: tag_name,
            upload_assets: ["../android/app/release/android-release.aab"]
    )

  end
end

platform :mac do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Clean"
  lane :clean do
    gradle(task: "clean")
  end

  desc "Create installation package"
  lane :package do
    gradle(task: "clean jpackage")
  end
end
