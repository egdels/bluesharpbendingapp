package de.schliweb.bluesharpbendingapp.utils;
/*
 * Copyright (c) 2023 Christian Kierdorf
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the “Software”),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 * The Logger class provides a utility for logging messages with different levels of severity
 * (debug, info, error). It allows for enabling or disabling debug and info logging globally.
 * Each logger instance is associated with a specific class to include contextual information
 * in the log messages.
 */
public class Logger {

    /**
     * A global static variable to control debug-level logging.
     * When set to true, debug messages will be displayed in the logger output.
     * When set to false, debug messages will be suppressed.
     */
    private static boolean isDebug = false;

    /**
     * A global static variable to control info-level logging.
     * When set to true, info messages will be displayed in the logger output.
     * When set to false, info messages will be suppressed.
     */
    private static boolean isInfo = false;
    /**
     * Represents the class associated with a given logger instance.
     * This class provides contextual information for log messages,
     * such as the name of the associated class, which is included
     * in the log output.
     */
    private final Class<?> clazz;

    /**
     * Constructs a Logger instance associated with a specific class.
     * The class provides contextual information that is included in all
     * log messages generated by this Logger instance.
     *
     * @param clazz the class for which the logger instance is created
     */
    public Logger(Class<?> clazz) {
        this.clazz = clazz;
    }

    /**
     * Retrieves the method name from the call stack at the specified depth.
     *
     * @param depth the depth in the call stack from which the method name should be retrieved,
     *              where 0 refers to the current method.
     * @return the name of the method at the specified depth in the call stack.
     *         If the depth is invalid, an exception may be thrown.
     */
    public static String getMethodName(final int depth) {
        return Thread.currentThread().getStackTrace()[depth].getMethodName();
    }

    /**
     * Sets the debug logging flag for the application.
     * When enabled, debug-level log messages will be displayed.
     *
     * @param isDebug a boolean value indicating whether debug-level logging should be enabled (true) or disabled (false)
     */
    public static void setDebug(boolean isDebug) {
        Logger.isDebug = isDebug;
    }

    /**
     * Sets the informational logging flag for the application.
     * When enabled, informational log messages will be displayed.
     *
     * @param isInfo a boolean value indicating whether informational logging should be enabled (true) or disabled (false)
     */
    public static void setInfo(boolean isInfo) {
        Logger.isInfo = isInfo;
    }

    /**
     * Logs a debug message to the console if debug-level logging is enabled.
     * The message includes the class name and method name for context,
     * aiding in tracing the application's behavior during development or debugging.
     *
     * @param string the debug message to be logged
     */
    public void debug(String string) {
        if (Logger.isDebug)
            System.out.println("DEBUG: " + this.clazz.getName() + "." + getMethodName(3) + " " + string);
    }

    /**
     * Logs an error message to the console, including the class name and method name for context.
     * This is useful for identifying and debugging errors during application execution.
     *
     * @param string the error message to be logged
     */
    public void error(String string) {
        System.out.println("ERROR: " + this.clazz.getName() + "." + getMethodName(3) + " " + string);
    }

    /**
     * Logs an informational message to the console if informational logging is enabled.
     * The message includes the class name and method name for context, aiding in
     * tracing the application's behavior.
     *
     * @param string the informational message to be logged
     */
    public void info(String string) {
        if (Logger.isInfo)
            System.out.println("INFO: " + this.clazz.getName() + "." + getMethodName(3) + " " + string);
    }
}
